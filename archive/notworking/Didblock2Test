<?php

/**
 * DID Database Unit Tests.
 *
 * PHP version 7
 *
 *
 * @category  default
 * @author    Travis Riesenberg
 * @copyright 2015-2016 @authors
 * @license   http://www.opensource.org/licenses/mit-license.html  MIT License
 */
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tymon\JWTAuth\Facades\JWTAuth;
use App\User;
use App\Didblock;
use App\Did;

class DidblockTest2 extends TestCase
{
    //
    use DatabaseTransactions;

    protected $token;
    protected $didblocks;
    protected $didblock;
    protected $didblock_id;
	
	protected $count = 0;
    protected $start = 1004560000;
    protected $end = 1004560009;

	//Thought about creating arrays and looping thru for testing but prob not going to do that here. 
	
	/**************************************************************************************************/
	
	protected $tests;
	
	protected function create_tests()
	{
		$start = 1004560000;
		$end = 1004560009;
		
		function assign_numbers($ARRAY){
			$start = $this->start + 10;
			$end = $this->end +10;
			
			$ARRAY['input']['$start'] = $ARRAY['$start'] = $start;
			$ARRAY['input']['$end'] = $ARRAY['$end'] = $end;
			
		}
		
		
		$tests = [
						
					[
						// Create: Good Data 
						'title'	=> 'Title: Create Valid DID Block',
						'input' => ['country_code' => 1,'name' => 'TEST GOOD DID BLOCK', 'carrier' => 'TEST GOOD CARRIER', 'start' => 1004560000, 'end' => 1004560009],
						'start'	=> $start,
						'end'	=> $end,
						'verb'	=> 'POST',
						'url'	=> '/api/didblock',
						'expected_field' => 'status_code',
						'expected_result'	=> '200',
					],
					[
						// Create: Good Data 
						'title'	=> 'Title: Create Valid DID Block',
						'input' => ['country_code' => 1,'name' => str_random(10), 'carrier' => str_random(10), 'start' => $start, 'end' => $end],
						'start'	=> $start,
						'end'	=> $end,
						'verb'	=> 'POST',
						'url'	=> '/api/didblock',
						'expected_field' => 'status_code',
						'expected_result'	=> '200',
					],
					[
						// Create: No Name
						'title'	=> 'Title: DID Block with No Name - Should Fail',
						'input' => ['country_code' => 1, 'carrier' => str_random(10), 'start' => 1004560010, 'end' => 1004560019],
						'verb'	=> 'POST',
						'url'	=> "/api/didblock/",
						'expected_field' => 'status_code',
						'expected_result'	=> '500',
					],
					[
						// Create: No Carrier - this is optional and should pass 
						'title'	=> 'Title: Create: DID Block with No Carrier - this is optional and should pass ',
						'input' => ['country_code' => 1, 'name' => 'TEST GOOD DID BLOCK', 'carrier' => '', 'start' => 1004560020, 'end' => 1004560029],
						'verb'	=> 'POST',
						'url'	=> "/api/didblock/",
						'expected_field' => 'status_code',
						'expected_result'	=> '200',
					],
					[
						// Create: Bad Data 
						'title'	=> 'Title: Create DID Block with 11 Digits',
						'input' => ['country_code' => '1','name' => 'TEST DID BLOCK', 'carrier' => 'TEST CARRIER', 'start' => 10045600300, 'end' => 10045600390],
						'verb'	=> 'POST',
						'url'	=> '/api/didblock',
						'expected_field' => 'status_code',
						'expected_result'	=> '500',
					],
					[
						// Create: Bad Data 
						'title'	=> 'Title: Create DID block with a non numeric country code',
						'input' => ['country_code' => '+1','name' => 'TEST DID BLOCK', 'carrier' => 'TEST CARRIER', 'start' => 1004560040, 'end' => 1004560049],
						'verb'	=> 'POST',
						'url'	=> '/api/didblock',
						'expected_field' => 'status_code',
						'expected_result'	=> '500',
					],
					[
						// 
						'title'	=> 'Title: Create DID Block with 11 Digits',
						'input' => ['country_code' => '1','name' => 'TEST DID BLOCK', 'carrier' => 'TEST CARRIER', 'start' => 1004560050, 'end' => 1004560059],
						'verb'	=> 'POST',
						'url'	=> '/api/didblock',
						'expected_field' => 'status_code',
						'expected_result'	=> '500',
					],
				];
		
		file_put_contents('test.json', json_encode($tests));
		
		return $this->tests = $tests; 
		
			
	}
	
	////////////// MADE THIS A REQUIRED TEST  ////////////////////////////////
	protected function id_required_tests()
	{
		
		// Its because this array is created before the didblock id is set that these are showing up blank. 
		// Seed Test Data
		$tests = [
								// Create Good Data 
							[
								'title'	=> 'Title: GET DID Block with ID '.$this->didblock_id,
								'input' => ['country_code' => '1','name' => 'TEST DID BLOCK', 'carrier' => 'TEST CARRIER', 'start' => 1004560020, 'end' => 1004560029],
								'verb'	=> 'GET',
								'url'	=> "/api/didblock/{$this->didblock_id}",
								'expected_field' => 'status_code',
								'expected_result'	=> '200',
							],
							[
								'title'	=> 'Title: GET DID Block with ID: '.$this->didblock_id,
								'input' => ['country_code' => 1,'name' => 'TEST DID BLOCK', 'carrier' => 'TEST CARRIER', 'start' => 1004560020, 'end' => 1004560029],
								'verb'	=> 'GET',
								'url'	=> "/api/didblock/{$this->didblock_id}",
								'expected_field' => 'status_code',
								'expected_result'	=> '200',
							],
							
						];
		
		
		
		return $this->tests = $tests; 
		
			
	}

	/**/

	
	protected function phpunit_testing($ARRAY, $COUNT)
    {

		$MESSAGE 			= '';
		
        // This test should fail because it has 11 digits on a NANP country code.
		$TOP = PHP_EOL.$COUNT.') '.__METHOD__;

        $response = $this->call($ARRAY['verb'],
                        $ARRAY['url'].'?token='.$this->token,
                        $ARRAY['input']);
        //dd($response);

		
		if (isset($response->original['didblock']['id'])) {
				$this->didblock_id = $response->original['didblock']['id'];
				echo "##################DIDBLOCKID: ".$this->didblock_id;
		}
		
        if (! $response->original[$ARRAY['expected_field']] == $ARRAY['expected_result']) {
            dd($response);
			\metaclassing\Utility::dumper($response);
        } else {
            $STATUS = 'RESULT: '.$response->original[$ARRAY['expected_field']];
			$MESSAGE = 'MESSAGE: '.$response->original['message'];
            $this->assertEquals($ARRAY['expected_result'], $response->original[$ARRAY['expected_field']]);
        }
		$RESULT = $TOP.' | '.$STATUS.' | EXPECTED: '.$ARRAY['expected_result'].' | '.$ARRAY['title'].' 		| '.$MESSAGE;
		print $RESULT;
		
		if ($COUNT == 2){
			//dd($response);
		}
    }
	
	
	/**************************************************************************************************/

	
	
    public function testDidblockAPI()
    {
        // This is the main TEST Function. PHP Unit must be started with 'test'
        echo PHP_EOL.__METHOD__.' | Starting Telephone Number API tests';

        $this->getJWT(env('TEST_USER_DN'));

		// Set the Test Variables
		$this->create_tests();
		// Loop thru each test. 
		
		
		$count = 0;
		foreach($this->tests as $test){
			$count++;
			$this->phpunit_testing($test, $count);
			
		}
		////////////// MADE THIS A REQUIRED TEST  ////////////////////////////////
		// Check this tomorrow. 
		$this->id_required_tests();
		
		foreach($this->tests as $test){
			$count++;
			$this->phpunit_testing($test, $count);
			
		}
		
		echo PHP_EOL."FINISHED THE LOOP".PHP_EOL;
		
		/*******************************************************************
		
		Commenting out for testing foreach loop. 
		
        // Call all the test functions here.
        $this->createDidblocks();
        $this->getDidblocks();
        $this->updateDidblocks();
        $this->getDidblocks();
        $this->getDidblock();


        /* Call Stuff that should fail

        $this->createDidblocks_fail_no_country_code();
        $this->createDidblocks_fail_blank_country_code();
        $this->createDidblocks_nonnumeric_country_code();

        $this->createDidblocks_fail_11digits();
        $this->createDidblocks_fail_blank_country_code();

        // This one needs error checking put in for update to block start and end editing.
        $this->updateDidblocks_fail_change_range();

		
		$this->deleteDidblocks();
		
        /**/


        echo PHP_EOL.__METHOD__.' All verification complete, testing successful, database has been cleaned up'.PHP_EOL;
    }

    protected function getJWT($userdn)
    {
        echo PHP_EOL.__METHOD__.' | Generating JWT for user '.$userdn;
        $credentials = ['dn' => $userdn, 'password' => ''];
        $this->token = JWTAuth::attempt($credentials);
        echo ' got token '.$this->token;
    }

    protected function getDidblocks()
    {
        echo PHP_EOL.__METHOD__.' | Getting DID Blocks';
        $response = $this->call('GET', '/api/didblock?token='.$this->token);
        $this->didblocks = $response->original['didblocks'];
        //$this->assertEquals(true, $response->original['success']);
        //dd($this->didblocks);

        if (! $response->original['status_code'] == 200) {
            \metaclassing\Utility::dumper($response);
            echo ' | Message: '.$response->original['message'];
        } else {
            echo ' | Found '.count($response->original['didblocks']).' didblocks';
            echo ' | Message: '.$response->original['message'];
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(200, $response->original['status_code']);
        }
    }

    protected function getDids()
    {
        echo PHP_EOL.__METHOD__.' | Getting DID Blocks';
        $response = $this->call('GET', '/api/didblock?token='.$this->token);
        $this->didblocks = $response->original['didblocks'];
        //dd($this->didblocks);
        if (! $response->original['status_code'] == 200) {
            \metaclassing\Utility::dumper($response);
        } else {
            echo ' | Found '.count($response->original['didblocks']).' didblocks';
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(200, $response->original['status_code']);
        }
    }

    protected function createDidblocks()
    {
        echo PHP_EOL.__METHOD__.' | Creating test Did block';
        $post = [
                'country_code'           => 1,
                'name'                   => 'TEST DID BLOCK',
                'carrier'                => 'TEST CARRIER',
                'start'                  => 1000000000,
                'end'                    => 1000009999,
                'type'                   => 'private',
                'comment'                => 'Test Comment',
                ];
        $response = $this->call('POST',
                        '/api/didblock?token='.$this->token,
                        $post);
        //dd($response);
        if (! $response->original['status_code'] == 200) {
            echo ' | Message: '.$response->original['message'];
            \metaclassing\Utility::dumper($response);
        } else {
            if (isset($response->original['didblock']['id'])) {
                $this->didblock_id = $response->original['didblock']['id'];
            }
            echo ' | Message: '.$response->original['message'];
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(200, $response->original['status_code']);
        }
    }

    protected function updateDidblocks()
    {
        echo PHP_EOL.__METHOD__.' | Updating '.$this->didblock_id.' test Did block';
        $put = [
                'country_code'         => 1,
                'name'                 => 'TEST DID BLOCK CHANGED',
                'carrier'              => 'TEST CARRIER CHANGED',
                //'start'                => 1000000000, 				// We don't want to allow changing start and end of a range.
                //'end'                  => 1000009999,
                'type'                   => 'private',
                'comment'                => 'Test Comment Updated',
                ];
        $response = $this->call('PUT',
                        '/api/didblock/'.$this->didblock_id.'?token='.$this->token,
                        $put);
        //dd($response);
        //echo $response->original['status_code'], $response->original['message'];
        //$this->assertEquals(true, $response->original['success']);
        if (! $response->original['status_code'] == 200) {
            \metaclassing\Utility::dumper($response);
        } else {
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(200, $response->original['status_code']);
        }
    }

    protected function getDidblock()
    {
        echo PHP_EOL.__METHOD__.' | Getting '.$this->didblock_id.' test Did block';
        $response = $this->call('GET',
                            '/api/didblock/'.$this->didblock_id.'?token='.$this->token);
        $this->didblock = $response->original['didblock'];

        if (! $response->original['status_code'] == 200) {
            \metaclassing\Utility::dumper($response);
        } else {
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(200, $response->original['status_code']);
        }
    }

    protected function deleteDidblocks()
    {
        echo PHP_EOL.__METHOD__.' | Deleting '.$this->didblock_id.' test Did block';
        $response = $this->call('DELETE',
                        '/api/didblock/'.$this->didblock_id.'?token='.$this->token);

        if (! $response->original['status_code'] == 200) {
            \metaclassing\Utility::dumper($response);
        } else {
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(200, $response->original['status_code']);
        }
    }

    /*
        Create Bad Data that should fail here.
    */


    /********************************************************************
        Country Code Validation
    ********************************************************************/

    protected function createDidblocks_nonnumeric_country_code()
    {
        // This test should fail because it has 11 digits on a NANP country code.
        echo PHP_EOL.__METHOD__.' | Creating test Did block with non integer';
        $post = [
                'country_code'            => '+1',
                'name'                    => 'TEST DID BLOCK',
                'carrier'                 => 'TEST CARRIER',
                'start'                   => 10000000000,
                'end'                     => 10000009999,
                ];
        $response = $this->call('POST',
                        '/api/didblock?token='.$this->token,
                        $post);
        //dd($response);

        // If the status_code is 500, then test is successfull.
        if (! $response->original['status_code'] == 500) {
            \Metaclassing\Utility::dumper($response);
        } else {
            echo ' | Message: '.$response->original['message'];
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(500, $response->original['status_code']);
        }
    }

    protected function createDidblocks_fail_no_country_code()
    {
        // This test should fail because it has 11 digits on a NANP country code.
        echo PHP_EOL.__METHOD__.' | Creating test Did block with no country code set';
        $post = [
                'name'                 => 'TEST DID BLOCK',
                'carrier'              => 'TEST CARRIER',
                'start'                => 10000000000,
                'end'                  => 10000009999,
                ];
        $response = $this->call('POST',
                        '/api/didblock?token='.$this->token,
                        $post);
        //dd($response);

        // If the status_code is 500, then test is successfull.
        if (! $response->original['status_code'] == 500) {
            \Metaclassing\Utility::dumper($response);
        } else {
            echo ' | Message: '.$response->original['message'];
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(500, $response->original['status_code']);
        }
    }

    protected function createDidblocks_fail_blank_country_code()
    {
        // This test should fail because it has 11 digits on a NANP country code.
        echo PHP_EOL.__METHOD__.' | Creating test Did block with blank country code';
        $post = [
                'country_code'         => '',
                'name'                 => 'TEST DID BLOCK',
                'carrier'              => 'TEST CARRIER',
                'start'                => 10000000000,
                'end'                  => 10000009999,
                ];
        $response = $this->call('POST',
                        '/api/didblock?token='.$this->token,
                        $post);
        //dd($response);

        // If the status_code is 500, then test is successfull.
        if (! $response->original['status_code'] == 500) {
            \Metaclassing\Utility::dumper($response);
        } else {
            echo ' | Message: '.$response->original['message'];
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(500, $response->original['status_code']);
        }
    }

    protected function createDidblocks_fail_11digits()
    {
        // This test should fail because it has 11 digits on a NANP country code.
        echo PHP_EOL.__METHOD__.' | Creating test Did block with 11 digits';
        $post = [
                'country_code'         => 1,
                'name'                 => 'TEST DID BLOCK',
                'carrier'              => 'TEST CARRIER',
                'start'                => 10000000000,
                'end'                  => 10000009999,
                ];
        $response = $this->call('POST',
                        '/api/didblock?token='.$this->token,
                        $post);
        //dd($response);

        // If the status_code is 500, then test is successfull.
        if (! $response->original['status_code'] == 500) {
            \Metaclassing\Utility::dumper($response);
        } else {
            echo ' | Message: '.$response->original['message'];
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(500, $response->original['status_code']);
        }
    }

    protected function updateDidblocks_fail_change_range()
    {
        // This test should fail because it is trying to update the start and end of an existing range. We should protect those fields from update.
        echo PHP_EOL.__METHOD__.' | Updating '.$this->didblock_id.' test Did block';
        $put = [
                'country_code'         => 1,
                'name'                 => 'TEST DID BLOCK CHANGE FAIL',
                'carrier'              => 'TEST CARRIER CHANGED FAIL',
                'start'                => 1000000000,                // We don't want to allow changing start and end of a range.
                'end'                  => 1000000999,                // We don't want to allow changing start and end of a range.
                ];
        $response = $this->call('PUT',
                        '/api/didblock/'.$this->didblock_id.'?token='.$this->token,
                        $put);
        //dd($response);

        // If the status_code is 500, then test is successfull.
        if (! $response->original['status_code'] == 500) {
            \Metaclassing\Utility::dumper($response);
        } else {
            echo ' | Message: '.$response->original['message'];
            echo ' | Status Code: '.$response->original['status_code'];
            $this->assertEquals(500, $response->original['status_code']);
        }
    }

    /*
    FUTURE TESTS GO HERE
    /**/
}
